#
# 2023.12.16 同一サービス、同一コンテナ内で、Django, Nginxを動作させるバージョン
#
image: docker:20.10
services:
  - docker:dind

# 全てのジョブの前に実行するコスクリプト
before_script:
  - docker login gitlab.example.com:4567

variables:
  DOCKER_HOST: tcp://docker:2375
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""
  DOCKER_DJANGO_IMG: django_sql_img
  CI_AWS_ECS_CLUSTER: aws-infra-dev-django
  CI_AWS_ECS_DJANGO_SERVICE: django
  CI_AWS_ECS_NGINX_SERVICE: nginx_conservice
  ECR_REPOSITORY_DJANGO: django_sql_conservice
  
  DOCKER_NGINX_IMG: nginx_img
  CI_AWS_ECS_TASK_DEFINITION: django_in_nginx
  #CI_AWS_ECS_TASK_DEFINITION_DJANGO: django_sql_conservice
  #CI_AWS_ECS_TASK_DEFINITION_NGINX: nginx_conservice
  JSON_FILE: task.out.json
  JSON_FILE_DJANGO: task.django.out.json
  JSON_FILE_NGINX: task.nginx.out.json
  ECR_REPOSITORY_NGINX: nginx_conservice
stages:
  - test
  - build
  - deploy

build:
  stage: build
  dependencies:
    - test
  before_script:
    # AWS CLIをインストール
    - apk add --update py-pip
    - pip install awscli
  script:
    # イメージのビルド
    - docker-compose -f conservice-single.yml build
    - docker save $DOCKER_DJANGO_IMG > $DOCKER_DJANGO_IMG.tar
    - docker save $DOCKER_NGINX_IMG > $DOCKER_NGINX_IMG.tar
  artifacts:
    #untracked: true
    paths:
      - $DOCKER_DJANGO_IMG.tar
      - $DOCKER_NGINX_IMG.tar
  #only:
  #  - master
  #  - dev
  #  - stg

test:
  stage: test
  #dependencies:
  #  - build
  before_script:
    - apk add --update py-pip
  script:
    #- docker load -i ${DOCKER_DJANGO_IMG}.tar
    - docker-compose -f conservice-single.yml run django_sql_service pytest
  #artifacts:
  #untracked: true
  #  paths:
  #    - $DOCKER_DJANGO_IMG.tar
  #    - $DOCKER_NGINX_IMG.tar
  #only:
  #  - master
  #  - dev
  #  - stg


# Task定義更新
# Task定義はNginx, Djangoは同じTask定義
deploy_nginx_in_django:
  stage: deploy
  dependencies:
    - build
  before_script:
    - apk add --update py-pip
    - pip install awscli
    - apk add jq
  script:
    # IAM認証情報を使用してECRリポジトリのログインパスワードを取得
    - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $ECR_REPOSITORY
    # DJANGOイメージのプッシュ
    - docker load -i ${DOCKER_DJANGO_IMG}.tar
    - docker tag $DOCKER_DJANGO_IMG:latest $ECR_REPOSITORY_DJANGO:${CI_COMMIT_SHORT_SHA}
    - docker push $ECR_REPOSITORY_DJANGO:${CI_COMMIT_SHORT_SHA}
    # NGINX イメージのプッシュ
    - docker load -i ${DOCKER_NGINX_IMG}.tar
    - docker tag $DOCKER_NGINX_IMG:latest $ECR_REPOSITORY_NGINX:${CI_COMMIT_SHORT_SHA}
    - docker push $ECR_REPOSITORY_NGINX:${CI_COMMIT_SHORT_SHA}

    # DJANGO / NGINX TASK 定義更新
    - >
     aws ecs describe-task-definition --task-definition ${CI_AWS_ECS_TASK_DEFINITION} --region ${AWS_DEFAULT_REGION} |
     jq ".taskDefinition | del (.registeredBy, .registeredAt, .taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities)" > ${JSON_FILE}
    # DJANGO 加工
    - >
      sed -i -e "s|\"image\": \".*${ECR_REPOSITORY_DJANGO}.*,|\"image\": \"${ECR_REPOSITORY_DJANGO}:${CI_COMMIT_SHORT_SHA}\",|g"
      ${JSON_FILE}
    # NGINX 加工
    - >
      sed -i -e "s|\"image\": \".*${ECR_REPOSITORY_NGINX}.*,|\"image\": \"${ECR_REPOSITORY_NGINX}:${CI_COMMIT_SHORT_SHA}\",|g"
      ${JSON_FILE}
    # 定義更新PUSH
    - aws ecs register-task-definition --family ${CI_AWS_ECS_TASK_DEFINITION} --cli-input-json file://${JSON_FILE}

    # サービス更新
    - >
      aws ecs update-service --cluster ${CI_AWS_ECS_CLUSTER} --service ${CI_AWS_ECS_SERVICE}
      --task-definition ${CI_AWS_ECS_TASK_DEFINITION}
  only:
    - master
  #when: manual





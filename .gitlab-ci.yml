image: docker:20.10
services:
  - docker:dind

# 全てのジョブの前に実行するコスクリプト
before_script:
  - docker login gitlab.example.com:4567

variables:
  DOCKER_HOST: tcp://docker:2375
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""
  DOCKER_IMAGE: django_sql_img
  CI_AWS_ECS_CLUSTER: django_sql_claster
  CI_AWS_ECS_SERVICE: django_sql_service
  CI_AWS_ECS_TASK_DEFINITION: django_sql_task
  CI_AWS_REGON: ap-northeast-1

stages:
  - build
  - test

build:
  stage: build
  before_script:
    # AWS CLIをインストール
    - apk add --update py-pip
    - pip install awscli
  script:
    # イメージのビルド
    - docker-compose -f gitlab-docker-compose.yml build
    - docker save $DOCKER_IMAGE > $DOCKER_IMAGE.tar
  artifacts:
    #untracked: true
    paths:
      - $DOCKER_IMAGE.tar
  only:
    - master
    - dev
    - stg

test:
  stage: test
  dependencies:
    - build
  before_script:
    - apk add --update py-pip
  script:
    - docker load -i ${DOCKER_IMAGE}.tar
    - docker-compose -f gitlab-docker-compose.yml run django_sql_service pytest
  artifacts:
    paths:
      - $DOCKER_IMAGE.tar
  only:
    - master
    - dev
    - stg

# タスク定義更新
deploy:
  stage: deploy
  dependencies:
    - test
  before_script:
    - apk add --update py-pip
    - pip install awscli
    - apk add jq
  script:
    - docker load -i ${DOCKER_IMAGE}.tar
    - docker tag $DOCKER_IMAGE:latest $ECR_REPOSITORY:${CI_COMMIT_SHORT_SHA}
    # IAM認証情報を使用してECRリポジトリのログインパスワードを取得
    - aws ecr get-login-password | docker login --username AWS --password-stdin $ECR_REPOSITORY
    # イメージのプッシュ
    - docker push $ECR_REPOSITORY:${CI_COMMIT_SHORT_SHA}
    # TASK 定義更新
    - >
      aws ecs describe-task-definition --task-definition ${CI_AWS_ECS_TASK_DEFINITION} --region ${CI_AWS_REGON} |
      jq ".taskDefinition | del (.registeredBy, .registeredAt, .taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities)" > task.out.json

    - >
      sed -i -e "s|\"image\": \".*${ECR_REPOSITORY}.*,|\"image\": \"${ECR_REPOSITORY}:${CI_COMMIT_SHORT_SHA}\",|g"
      task.out.json

    - aws ecs register-task-definition --family ${CI_AWS_ECS_TASK_DEFINITION} --cli-input-json file://task.out.json
    # サービス更新
    - >
      aws ecs update-service --cluster ${CI_AWS_ECS_CLUSTER} --service ${CI_AWS_ECS_SERVICE}
      --task-definition ${CI_AWS_ECS_TASK_DEFINITION}

  only:
    - master
  when: manual
 
